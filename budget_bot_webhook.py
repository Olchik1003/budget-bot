import asyncio
import logging
import os
import re
from collections import defaultdict, Counter
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
import matplotlib.pyplot as plt

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
PORT = int(os.getenv("PORT", 10000))
BASE_WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

user_data = defaultdict(lambda: {
    "income": [],
    "expenses": [],
    "categories": {
        "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã"],
        "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å"],
        "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "–±–∞—Ä"],
        "–ø—Ä–æ—á–µ–µ": []
    }
})

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"), KeyboardButton(text="üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")]
    ],
    resize_keyboard=True
)

class EditCategory(StatesGroup):
    waiting_input = State()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>
<code>1200 –º–µ—Ç—Ä–æ</code>""",
        reply_markup=main_kb
    )

@dp.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cats = user_data[user_id]["categories"]
    text = "üìÇ –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
"
    for cat, keys in cats.items():
        text += f"‚Ä¢ <b>{cat}</b>: {', '.join(keys)}
"
    text += "
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∞–≤—Ç–æ, –±–µ–Ω–∑–∏–Ω, —Å—Ç–æ—è–Ω–∫–∞</code>"
    await state.set_state(EditCategory.waiting_input)
    await message.answer(text)

@dp.message(EditCategory.waiting_input)
async def save_category(message: Message, state: FSMContext):
    user_id = message.from_user.id
    try:
        parts = message.text.split(",")
        category = parts[0].strip()
        keywords = [p.strip().lower() for p in parts[1:]]
        user_data[user_id]["categories"][category] = keywords
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category}</b> –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except:
        await message.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
<code>–µ–¥–∞, –ø—Ä–æ–¥—É–∫—Ç—ã, —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç</code>")
    await state.clear()

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: Message):
    user_id = message.from_user.id
    income = sum(i[0] for i in user_data[user_id]["income"])
    expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üìä –î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ
üìâ –†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ")

@dp.message(F.text == "üí∞ –û—Å—Ç–∞—Ç–æ–∫")
async def balance(message: Message):
    user_id = message.from_user.id
    income = sum(i[0] for i in user_data[user_id]["income"])
    expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üíº –û—Å—Ç–∞—Ç–æ–∫: {income - expenses} ‚ÇΩ")

@dp.message(F.text == "üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def by_category(message: Message):
    user_id = message.from_user.id
    counter = Counter()
    for amount, _, cat in user_data[user_id]["expenses"]:
        counter[cat] += amount
    if not counter:
        await message.answer("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
        return
    # –ü–æ—Å—Ç—Ä–æ–∏–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    labels, values = zip(*counter.items())
    plt.figure()
    plt.pie(values, labels=labels, autopct="%1.1f%%")
    plt.title("–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    path = "/tmp/pie.png"
    plt.savefig(path)
    plt.close()
    with open(path, "rb") as f:
        await message.answer_photo(f)

@dp.message()
async def parse_text(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    if text.startswith("+"):
        match = re.match(r"\+(\d+)\s*(.*)", text)
        if match:
            amount = int(match.group(1))
            desc = match.group(2) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
            user_data[user_id]["income"].append((amount, desc))
            await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {desc}")
        else:
            await message.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>")
    else:
        match = re.match(r"(\d+)\s*(.+)", text)
        if match:
            amount = int(match.group(1))
            desc = match.group(2)
            cats = user_data[user_id]["categories"]
            cat = "–ø—Ä–æ—á–µ–µ"
            for c, keys in cats.items():
                if any(k in desc.lower() for k in keys):
                    cat = c
                    break
            user_data[user_id]["expenses"].append((amount, desc, cat))
            await message.answer(f"üîª –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {desc} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat})")
        else:
            await message.answer("‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
<code>1200 –º–µ—Ç—Ä–æ</code>")

async def on_startup(bot: Bot):
    webhook_url = BASE_WEBHOOK_URL + WEBHOOK_PATH
    await bot.set_webhook(webhook_url, drop_pending_updates=True)

async def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    await on_startup(bot)
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == '__main__':
    asyncio.run(main())
