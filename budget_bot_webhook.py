import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import os
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://your-service-name.onrender.com")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = {}

class AddCategoryState(StatesGroup):
    waiting_for_category = State()

def initialize_user_data(user_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            "income": [],
            "expenses": [],
            "categories": {
                "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã"],
                "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏"],
                "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–±–∞—Ä"],
                "–ø—Ä–æ—á–µ–µ": []
            }
        }

@dp.message(F.text.lower().in_(["/start", "/help"]))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    initialize_user_data(message.from_user.id)
    await message.answer(
        "üìä –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞\n\n"
        "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥: +5000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n"
        "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: 1500 –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
        "/–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é - –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    )

@dp.message(F.text.lower() == "/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    initialize_user_data(user_id)
    
    categories = "\n".join(
        f"‚Ä¢ {cat}: {', '.join(keywords)}"
        for cat, keywords in user_data[user_id]["categories"].items()
    )
    await message.answer(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n{categories}")

@dp.message(F.text.lower() == "/–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_command(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(AddCategoryState.waiting_for_category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@dp.message(AddCategoryState.waiting_for_category)
async def process_category(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    parts = [p.strip() for p in message.text.split(",") if p.strip()]
    
    if len(parts) < 2:
        await message.answer("–ù—É–∂–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ")
        return
    
    category, *keywords = parts
    user_data[user_id]["categories"][category.lower()] = [k.lower() for k in keywords]
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    await state.clear()

@dp.message(F.text.startswith("+"))
async def add_income(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞"""
    try:
        amount = int(message.text.split()[0][1:])
        user_id = message.from_user.id
        initialize_user_data(user_id)
        user_data[user_id]["income"].append(amount)
        await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ +{amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω")
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: +5000 –∑–∞—Ä–ø–ª–∞—Ç–∞")

@dp.message(F.text[0].isdigit())
async def add_expense(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = int(message.text.split()[0])
        user_id = message.from_user.id
        initialize_user_data(user_id)
        category = "–ø—Ä–æ—á–µ–µ"
        
        if len(message.text.split()) > 1:
            description = message.text.split()[1].lower()
            for cat, keywords in user_data[user_id]["categories"].items():
                if any(kw in description for kw in keywords):
                    category = cat
                    break
        
        user_data[user_id]["expenses"].append((amount, category))
        await message.answer(f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount}‚ÇΩ ({category}) –¥–æ–±–∞–≤–ª–µ–Ω")
    except:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: 1500 –ø—Ä–æ–¥—É–∫—Ç—ã")

async def on_startup(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {WEBHOOK_URL}")

async def on_shutdown(app: web.Application):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    await bot.delete_webhook()
    logger.info("Webhook —É–¥–∞–ª–µ–Ω")

async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    if request.match_info.get("token") == API_TOKEN:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot=bot, update=update)
        return web.Response()
    return web.Response(status=403)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    web.run_app(
        app,
        host="0.0.0.0",
        port=int(os.getenv("PORT", 3000))
    )

if __name__ == "__main__":
    main()
