import asyncio
import logging
import os
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiogram.client.default import DefaultBotProperties
from collections import defaultdict

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = "https://budget-bot-8lfi.onrender.com" + WEBHOOK_PATH

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

user_data = defaultdict(lambda: {"income": [], "expenses": [], "categories": {}})

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton(text="üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
    ],
    resize_keyboard=True
)

default_categories = {
    "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–±–µ–Ω–∑–∏–Ω", "–∞–≤—Ç–æ–±—É—Å"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": ["–∫–æ—Ä–º", "–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä"],
    "–ø—Ä–æ—á–µ–µ": []
}

@dp.message(CommandStart())
async def start(message: Message):
    user_data[message.from_user.id]["categories"] = default_categories.copy()
    await message.answer(
        """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>
<code>1200 –º–µ—Ç—Ä–æ</code>""", reply_markup=main_kb
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ûï <b>–î–æ—Ö–æ–¥</b> ‚Äî <code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>\n"
        "üí∏ <b>–†–∞—Å—Ö–æ–¥</b> ‚Äî <code>200 –∫–∞—Ñ–µ</code>\n"
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>, üí∞ <b>–û—Å—Ç–∞—Ç–æ–∫</b>, üìä <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b>\n"
        "üìù <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b> ‚Äî <code>–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–ª—é—á–µ–≤–æ–µ1, –∫–ª—é—á–µ–≤–æ–µ2</code>\n"
        "‚ùå <b>–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å</b> ‚Äî –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ\n\n"
        "‚ÑπÔ∏è –Ø —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.",
        parse_mode="HTML"
    )

async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()
    await bot.session.close()

async def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    setup_application(app, dp, bot=bot)

    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path=WEBHOOK_PATH)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    return app

if __name__ == "__main__":
    web.run_app(main(), host="0.0.0.0", port=int(os.getenv("PORT", 8000)))