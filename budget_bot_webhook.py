import asyncio
import logging
import os
import re
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from collections import defaultdict

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = "https://budget-bot-8lfi.onrender.com" + WEBHOOK_PATH

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_data = defaultdict(lambda: {"income": [], "expenses": [], "categories": {}})

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="‚ûï –î–æ—Ö–æ–¥"), KeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton(text="üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton(text="üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
    ],
    resize_keyboard=True
)

default_categories = {
    "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"],
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": ["–∫–æ—Ä–º", "–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å", "—Ç–∞–∫—Å–∏", "–º–∞—à–∏–Ω–∞", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–±–µ–Ω–∑–∏–Ω"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–∏–≥—Ä—ã", "—Ç–µ–∞—Ç—Ä"],
    "—Ç–µ—Ö–Ω–∏–∫–∞": ["—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–æ—É—Ç–±—É–∫", "–≥–∞–¥–∂–µ—Ç", "—Ç–µ—Ö–Ω–∏–∫–∞"],
    "–ø—Ä–æ—á–µ–µ": []
}

class States(StatesGroup):
    expense = State()
    income = State()
    category = State()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_data[user_id]["categories"] = default_categories.copy()
    await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_kb)

@dp.message(F.text.lower().in_(["üìà —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
async def full_stats(message: Message):
    user_id = message.from_user.id
    income = sum(i[0] for i in user_data[user_id]["income"])
    expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üìä –î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ\nüìâ –†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ")

@dp.message(F.text.lower().in_(["üí∞ –æ—Å—Ç–∞—Ç–æ–∫", "–æ—Å—Ç–∞—Ç–æ–∫", "–±–∞–ª–∞–Ω—Å", "–∏—Ç–æ–≥–æ"]))
async def show_balance(message: Message):
    user_id = message.from_user.id
    income = sum(i[0] for i in user_data[user_id]["income"])
    expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üíº –ë–∞–ª–∞–Ω—Å: {income - expenses} ‚ÇΩ")

async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()
    await bot.session.close()

async def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    setup_application(app, dp, bot=bot)

    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path=WEBHOOK_PATH)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    return app

if __name__ == "__main__":
    web.run_app(main(), host="0.0.0.0", port=int(os.getenv("PORT", 8000)))