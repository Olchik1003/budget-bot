import asyncio
import logging
import os
import re
from collections import defaultdict

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
PORT = int(os.getenv("PORT", 10000))
BASE_WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

user_data = defaultdict(lambda: {"income": [], "expenses": [], "categories": {
    "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "–±–∞—Ä"],
    "–ø—Ä–æ—á–µ–µ": []
}})

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton(text="üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
    ],
    resize_keyboard=True
)

class CategoryState(StatesGroup):
    editing = State()

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        '''üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>
<code>1200 –º–µ—Ç—Ä–æ</code>''',
        reply_markup=main_kb
    )

@dp.message(F.text.startswith("+"))
async def add_income(message: Message):
    try:
        amount, *desc = message.text[1:].split(" ", 1)
        amount = int(amount)
        description = desc[0] if desc else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        user_data[message.from_user.id]["income"].append((amount, description))
        await message.answer(f"üí∏ –î–æ—Ö–æ–¥ <b>{amount} ‚ÇΩ</b> –¥–æ–±–∞–≤–ª–µ–Ω: {description}")
    except Exception:
        await message.answer(
            '''‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>'''
        )

@dp.message(lambda m: m.text and m.text[0].isdigit())
async def add_expense(message: Message):
    try:
        parts = message.text.split(" ", 1)
        amount = int(parts[0])
        description = parts[1] if len(parts) > 1 else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        uid = message.from_user.id
        categories = user_data[uid]["categories"]
        category = "–ø—Ä–æ—á–µ–µ"
        for cat, keywords in categories.items():
            if any(word in description.lower() for word in keywords):
                category = cat
                break
        user_data[uid]["expenses"].append((amount, description, category))
        await message.answer(f"üßæ –†–∞—Å—Ö–æ–¥ <b>{amount} ‚ÇΩ</b> –¥–æ–±–∞–≤–ª–µ–Ω: {description} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
    except Exception:
        await message.answer(
            '''‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
<code>1200 –º–µ—Ç—Ä–æ</code>'''
        )

async def on_startup(app):
    await bot.set_webhook(BASE_WEBHOOK_URL + WEBHOOK_PATH)

async def on_shutdown(app):
    await bot.delete_webhook()

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host="0.0.0.0", port=PORT)