import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
import os
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_HOST = 'https://your-domain.com'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
WEBHOOK_PATH = '/webhook/' + API_TOKEN
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}

class AddCategoryState(StatesGroup):
    waiting_for_category = State()

def initialize_user_data(user_id):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    if user_id not in user_data:
        user_data[user_id] = {
            "income": [],
            "expenses": [],
            "categories": {
                "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–º–∞–≥–∞–∑–∏–Ω", "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç"],
                "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å", "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–±–µ–Ω–∑–∏–Ω"],
                "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "–±–∞—Ä", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–∫–æ–Ω—Ü–µ—Ä—Ç"],
                "–∂–∏–ª—å–µ": ["–∞—Ä–µ–Ω–¥–∞", "–∫–æ–º–º—É–Ω–∞–ª–∫–∞", "–∫–≤–∞—Ä—Ç–∏—Ä–∞", "–¥–æ–º"],
                "–∑–¥–æ—Ä–æ–≤—å–µ": ["–∞–ø—Ç–µ–∫–∞", "–≤—Ä–∞—á", "–±–æ–ª—å–Ω–∏—Ü–∞", "–ª–µ–∫–∞—Ä—Å—Ç–≤–∞"],
                "–ø—Ä–æ—á–µ–µ": []
            }
        }

@dp.message(F.text.lower() == '/start')
@dp.message(F.text.lower() == '/help')
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    user_id = message.from_user.id
    initialize_user_data(user_id)
    
    help_text = """
<b>üí∞ –ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞</b>

<b>–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥:</b>
+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞
+3000 –ø–æ–¥–∞—Ä–æ–∫

<b>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥:</b>
1500 –º–µ—Ç—Ä–æ
2500 –ø—Ä–æ–¥—É–∫—Ç—ã
3000 –∫–∏–Ω–æ

<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
/–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å–∫–æ—Ä–æ)
"""
    await message.answer(help_text)

@dp.message(F.text.lower() == '/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def show_categories(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    user_id = message.from_user.id
    initialize_user_data(user_id)
    
    categories = user_data[user_id]["categories"]
    
    text = "<b>üìÇ –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>\n\n"
    for category, keywords in categories.items():
        text += f"<b>‚Ä¢ {category.capitalize()}</b>: {', '.join(keywords)}\n"
    
    await message.answer(text)

@dp.message(F.text.lower() == '/–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é')
async def add_category_command(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    await state.set_state(AddCategoryState.waiting_for_category)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
        "–ü—Ä–∏–º–µ—Ä: <i>—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –º–µ—Ç—Ä–æ, —Ç–∞–∫—Å–∏, –∞–≤—Ç–æ–±—É—Å</i>"
    )

@dp.message(AddCategoryState.waiting_for_category)
async def process_category_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    initialize_user_data(user_id)
    
    input_text = message.text.strip().lower()
    parts = [part.strip() for part in input_text.split(',') if part.strip()]
    
    if len(parts) < 2:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
        return
    
    category_name = parts[0]
    keywords = parts[1:]
    
    if category_name in user_data[user_id]["categories"]:
        await message.answer(f"‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        await state.clear()
        return
    
    user_data[user_id]["categories"][category_name] = keywords
    await message.answer(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏: "
        f"{', '.join(keywords)}"
    )
    await state.clear()

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    initialize_user_data(user_id)
    text = message.text.strip().lower()
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ—Ö–æ–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +)
        if text.startswith('+'):
            parts = text.split(maxsplit=1)
            if len(parts) < 2:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞")
            
            amount = int(parts[0][1:].strip())
            description = parts[1].strip()
            
            user_data[user_id]["income"].append((amount, description))
            await message.answer(
                f"‚úÖ –î–æ—Ö–æ–¥ <b>{amount} ‚ÇΩ</b> –¥–æ–±–∞–≤–ª–µ–Ω: <i>{description}</i>"
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–∞ (—á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª–µ)
        elif text[0].isdigit():
            parts = text.split(maxsplit=1)
            amount = int(parts[0].strip())
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            category = "–ø—Ä–æ—á–µ–µ"
            description = ""
            
            if len(parts) > 1:
                description = parts[1].strip()
                for cat, keywords in user_data[user_id]["categories"].items():
                    if any(keyword in description for keyword in keywords):
                        category = cat
                        break
            
            user_data[user_id]["expenses"].append((amount, category, description))
            await message.answer(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ <b>{amount} ‚ÇΩ</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{category}</b>"
            )
        
        else:
            await message.answer(
                "‚ùó –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +) –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥ (—á–∏—Å–ª–æ).\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    except ValueError as e:
        await message.answer(
            f"‚ùó –û—à–∏–±–∫–∞: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
            "–î–æ—Ö–æ–¥: +50000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n–†–∞—Å—Ö–æ–¥: 1500 –º–µ—Ç—Ä–æ"
        )
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        await message.answer("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def on_startup(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    await bot.set_webhook(WEBHOOK_URL)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(bot: Bot):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.warning('–í—ã–∫–ª—é—á–µ–Ω–∏–µ..')
    await bot.delete_webhook()
    logger.warning('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞"""
    if request.match_info.get('token') == API_TOKEN:
        update = types.Update(**(await request.json()))
        await dp.feed_update(bot=bot, update=update)
        return web.Response()
    return web.Response(status=403)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    web.run_app(
        app,
        host='0.0.0.0',
        port=os.getenv("PORT", 3000)
    )

if __name__ == '__main__':
    main()
