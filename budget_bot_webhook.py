import asyncio
import logging
import os
from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from collections import defaultdict

API_TOKEN = os.getenv("API_TOKEN")
BASE_WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
PORT = int(os.getenv("PORT", 10000))

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_data = defaultdict(lambda: {"income": [], "expenses": []})

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞
1200 –º–µ—Ç—Ä–æ""",
        reply_markup=main_kb
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: Message):
    uid = message.from_user.id
    income = sum(i[0] for i in user_data[uid]["income"])
    expenses = sum(i[0] for i in user_data[uid]["expenses"])
    await message.answer(f"üìà –î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ
üìâ –†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ")

@dp.message(F.text == "üí∞ –û—Å—Ç–∞—Ç–æ–∫")
async def balance(message: Message):
    uid = message.from_user.id
    income = sum(i[0] for i in user_data[uid]["income"])
    expenses = sum(i[0] for i in user_data[uid]["expenses"])
    await message.answer(f"üíº –ë–∞–ª–∞–Ω—Å: {income - expenses} ‚ÇΩ")

@dp.message(F.text == "üìà –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories(message: Message):
    await message.answer(
        """‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.
–ü—Ä–∏–º–µ—Ä: —Ç–µ—Ö–Ω–∏–∫–∞, –Ω–æ—É—Ç–±—É–∫, —Ç–µ–ª–µ—Ñ–æ–Ω"""
    )

async def on_startup(bot: Bot):
    webhook_url = f"{BASE_WEBHOOK_URL}{WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url)

async def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    await on_startup(bot)
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    asyncio.run(main())