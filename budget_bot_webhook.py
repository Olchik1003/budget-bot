import asyncio
import logging
import os
import re
from aiohttp import web
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from collections import defaultdict

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = "https://budget-bot-8lfi.onrender.com" + WEBHOOK_PATH

bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher(storage=MemoryStorage())

user_data = defaultdict(lambda: {"income": [], "expenses": [], "categories": {}})

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton(text="üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
    ],
    resize_keyboard=True
)

default_categories = {
    "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã", "–∫–∞—Ñ–µ", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–±–µ–Ω–∑–∏–Ω", "–∞–≤—Ç–æ–±—É—Å"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": ["–∫–æ—Ä–º", "–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä"],
    "–ø—Ä–æ—á–µ–µ": []
}

class States(StatesGroup):
    waiting_text = State()

@dp.message(CommandStart())
async def start(message: Message):
    user_data[message.from_user.id]["categories"] = default_categories.copy()
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

"
                         "<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>
<code>1200 –º–µ—Ç—Ä–æ</code>",
                         reply_markup=main_kb)

@dp.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
"
        "‚ûï <b>–î–æ—Ö–æ–¥</b> ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>
"
        "üí∏ <b>–†–∞—Å—Ö–æ–¥</b> ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>200 –∫–∞—Ñ–µ</code>
"
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –≤—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–∞–º –∏ —Ä–∞—Å—Ö–æ–¥–∞–º
"
        "üìä <b>–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º</b> ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
"
        "üí∞ <b>–û—Å—Ç–∞—Ç–æ–∫</b> ‚Äî —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
"
        "üìù <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</b> ‚Äî –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
"
        "‚ùå <b>–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥

"
        "–¢–∞–∫–∂–µ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.

"
        "‚ÑπÔ∏è –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏!",
        parse_mode="HTML"
    )

@dp.message(F.text)
async def handle_input(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    if re.match(r'^[+]?\d+', text):
        match = re.match(r'^([+]?\d+)\s+(.+)', text)
        if not match:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            return
        amount = int(match.group(1).replace("+", ""))
        desc = match.group(2)
        if text.startswith("+"):
            user_data[user_id]["income"].append((amount, desc))
            await message.answer(f"üí∞ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {desc}")
        else:
            category = "–ø—Ä–æ—á–µ–µ"
            for cat, keys in user_data[user_id]["categories"].items():
                if any(k in desc.lower() for k in keys):
                    category = cat
                    break
            user_data[user_id]["expenses"].append((amount, desc, category))
            await message.answer(f"üí∏ –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {desc} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
    elif text.lower() == "–æ—Å—Ç–∞—Ç–æ–∫":
        income = sum(i[0] for i in user_data[user_id]["income"])
        expense = sum(e[0] for e in user_data[user_id]["expenses"])
        await message.answer(f"üíº –û—Å—Ç–∞—Ç–æ–∫: {income - expense} ‚ÇΩ")
    elif text.lower() in ["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üìà —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]:
        income = sum(i[0] for i in user_data[user_id]["income"])
        expense = sum(e[0] for e in user_data[user_id]["expenses"])
        await message.answer(f"üìä –î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ\nüìâ –†–∞—Å—Ö–æ–¥—ã: {expense} ‚ÇΩ")
    elif text.lower() in ["–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "üìä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"]:
        stats = {}
        for amount, _, cat in user_data[user_id]["expenses"]:
            stats[cat] = stats.get(cat, 0) + amount
        if not stats:
            await message.answer("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
        else:
            result = "üìÇ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
            for cat, total in stats.items():
                result += f"‚Ä¢ {cat}: {total} ‚ÇΩ\n"
            await message.answer(result)
    elif text.lower() in ["–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "üìù –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"]:
        await message.answer("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–ª—é—á–µ–≤–æ–µ1, –∫–ª—é—á–µ–≤–æ–µ2</code>")
        await state.set_state(States.waiting_text)
    else:
        await message.answer("‚ùî –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ <code>/help</code> –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

@dp.message(States.waiting_text)
async def add_category(message: Message, state: FSMContext):
    user_id = message.from_user.id
    parts = message.text.split(",")
    category = parts[0].strip().lower()
    keywords = [p.strip().lower() for p in parts[1:]]
    user_data[user_id]["categories"][category] = keywords
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

async def on_startup(bot: Bot):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot):
    await bot.delete_webhook()
    await bot.session.close()

async def main():
    logging.basicConfig(level=logging.INFO)
    app = web.Application()
    setup_application(app, dp, bot=bot)

    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path=WEBHOOK_PATH)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    return app

if __name__ == "__main__":
    web.run_app(main(), host="0.0.0.0", port=int(os.getenv("PORT", 8000)))