import os
import re
import logging
from collections import defaultdict

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

API_TOKEN = os.getenv("API_TOKEN")
WEBHOOK_PATH = f"/webhook/{API_TOKEN}"
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL", "") + WEBHOOK_PATH

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

user_data = defaultdict(lambda: {"income": [], "expenses": [], "categories": {
    "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "–±–∞—Ä"],
    "–ø—Ä–æ—á–µ–µ": []
}})

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton(text="üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
    ],
    resize_keyboard=True
)

@dp.message(F.text == "/start")
async def start(message: Message):
    await message.answer(
        '''üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞.
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:

<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>
<code>1200 –º–µ—Ç—Ä–æ</code>''',
        reply_markup=main_kb
    )

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: Message):
    user_id = message.from_user.id
    income = sum(i[0] for i in user_data[user_id]["income"])
    expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üìä –î–æ—Ö–æ–¥—ã: {income} ‚ÇΩ\nüí∏ –†–∞—Å—Ö–æ–¥—ã: {expenses} ‚ÇΩ")

@dp.message(F.text == "üí∞ –û—Å—Ç–∞—Ç–æ–∫")
async def balance(message: Message):
    user_id = message.from_user.id
    income = sum(i[0] for i in user_data[user_id]["income"])
    expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üíº –û—Å—Ç–∞—Ç–æ–∫: {income - expenses} ‚ÇΩ")

@dp.message(F.text == "üìà –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def stats_by_category(message: Message):
    user_id = message.from_user.id
    category_totals = defaultdict(int)
    for amount, _, category in user_data[user_id]["expenses"]:
        category_totals[category] += amount
    if not category_totals:
        await message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
        return
    text = "üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for cat, total in category_totals.items():
        text += f"‚Ä¢ {cat.capitalize()}: {total} ‚ÇΩ\n"
    await message.answer(text)

@dp.message(F.text == "üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories(message: Message):
    user_id = message.from_user.id
    cats = user_data[user_id]["categories"]
    text = "üìÇ –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
    for cat, keys in cats.items():
        text += f"‚Ä¢ {cat}: {', '.join(keys)}\n"
    await message.answer(text)

@dp.message()
async def handle_entry(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    if match := re.match(r"^\+?(\d+)\s*(.*)", text):
        amount = int(match[1])
        description = match[2] or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        if text.startswith("+"):
            user_data[user_id]["income"].append((amount, description))
            await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {description}")
        else:
            category = "–ø—Ä–æ—á–µ–µ"
            for cat, keys in user_data[user_id]["categories"].items():
                if any(k in description.lower() for k in keys):
                    category = cat
                    break
            user_data[user_id]["expenses"].append((amount, description, category))
            await message.answer(f"üîª –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {description} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
    else:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n<code>+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>\n<code>1200 –º–µ—Ç—Ä–æ</code>")

async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)

app = web.Application()
dp.startup.register(on_startup)
SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
setup_application(app, dp, bot=bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 10000)))