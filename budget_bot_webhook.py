from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from collections import defaultdict
import asyncio
import os
import re

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class CategoryState(StatesGroup):
    editing_category = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = defaultdict(lambda: {"categories": {
    "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "–±–∞—Ä"],
    "–ø—Ä–æ—á–µ–µ": []
}})

@dp.message(F.text == "üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def edit_categories(message: Message, state: FSMContext):
    user_id = message.from_user.id
    cats = user_data[user_id]["categories"]
    text = "üìÇ –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
"
    for cat, keys in cats.items():
        text += f"‚Ä¢ {cat}: {', '.join(keys) if keys else '‚Äî'}\n"
    await message.answer(text)
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n–ü—Ä–∏–º–µ—Ä:\n—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, —Å—Ç–æ—è–Ω–∫–∞, –±–µ–Ω–∑–∏–Ω, –∞–≤—Ç–æ–º–æ–π–∫–∞, –∞–≤—Ç–æ"
    )
    await state.set_state(CategoryState.editing_category)

@dp.message(CategoryState.editing_category)
async def save_category(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    try:
        parts = [p.strip().lower() for p in text.split(",")]
        category = parts[0]
        keywords = parts[1:]
        user_data[user_id]["categories"][category] = keywords
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception:
        await message.answer("‚ùó –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ1, –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ2")
    await state.clear()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())