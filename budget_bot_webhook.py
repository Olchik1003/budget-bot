import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import Message
import os

API_TOKEN = os.getenv("API_TOKEN")
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_data = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['start'])
async def send_welcome(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"income": [], "expenses": [], "categories": {"–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã"], "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "—Ç–∞–∫—Å–∏", "–∞–≤—Ç–æ–±—É—Å"], "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã", "–±–∞—Ä"], "–ø—Ä–æ—á–µ–µ": []}}
    
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "+50000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n"
        "1200 –º–µ—Ç—Ä–æ"
    )

@dp.message_handler(commands=['–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'])
async def show_categories(message: Message):
    user_id = message.from_user.id
    categories = user_data[user_id]["categories"]
    
    text = "üìÇ –¢–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n"
    for category, keywords in categories.items():
        text += f"‚Ä¢ {category}: {', '.join(keywords)}\n"
    
    await message.answer(text)

@dp.message_handler(commands=['–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é'])
async def add_category(message: Message):
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü—Ä–∏–º–µ—Ä: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –º–µ—Ç—Ä–æ, —Ç–∞–∫—Å–∏, –∞–≤—Ç–æ–±—É—Å")

@dp.message_handler()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()
    
    if text.startswith('+'):
        # –≠—Ç–æ –¥–æ—Ö–æ–¥
        try:
            amount, description = text.split(" ", 1)
            amount = int(amount.replace('+', '').strip())
            user_data[user_id]["income"].append((amount, description))
            await message.answer(f"–î–æ—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {description}")
        except:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +50000 –∑–∞—Ä–ø–ª–∞—Ç–∞")
    
    elif text.isdigit():
        # –≠—Ç–æ —Ä–∞—Å—Ö–æ–¥
        try:
            amount = int(text)
            category = "–ø—Ä–æ—á–µ–µ"
            for cat, keywords in user_data[user_id]["categories"].items():
                if any(keyword in message.text.lower() for keyword in keywords):
                    category = cat
                    break
            user_data[user_id]["expenses"].append((amount, category))
            await message.answer(f"–†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")
        except:
            await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞—Å—Ö–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1000 –∫–æ—Ä–º –¥–ª—è –∫–æ—à–∫–∏")
    
    else:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ /–¥–æ–±–∞–≤–∏—Ç—å–∫–∞—Ç–µ–≥–æ—Ä–∏—é")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    logging.basicConfig(level=logging.INFO)
    executor.start_polling(dp, skip_updates=True)
