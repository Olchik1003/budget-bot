import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from collections import defaultdict
import re

API_TOKEN = '7654498035:AAEfTDuIVCXsQ7cccVmGDlfuEddoL3ZKDro'  # –í–∞—à —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

user_data = defaultdict(lambda: {"income": [], "expenses": [], "categories": {}})

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton(text="‚ûï –î–æ—Ö–æ–¥"), KeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton(text="üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"), KeyboardButton(text="üí∞ –û—Å—Ç–∞—Ç–æ–∫")],
        [KeyboardButton(text="üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")]
    ],
    resize_keyboard=True
)

default_categories = {
    "–µ–¥–∞": ["–µ–¥–∞", "–ø—Ä–æ–¥—É–∫—Ç—ã"],
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": ["–∫–æ—Ä–º", "–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "–∂–∏–≤–æ—Ç–Ω—ã–µ"],
    "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç": ["–º–µ—Ç—Ä–æ", "–∞–≤—Ç–æ–±—É—Å", "—Ç–∞–∫—Å–∏"],
    "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–∏–Ω–æ", "–∏–≥—Ä—ã"],
    "–ø—Ä–æ—á–µ–µ": []
}

class ExpenseState(StatesGroup):
    waiting_for_expense = State()

class IncomeState(StatesGroup):
    waiting_for_income = State()

class CategoryState(StatesGroup):
    editing_category = State()

class DeleteState(StatesGroup):
    choosing_delete = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["categories"] = default_categories.copy()
    await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ –±—é–¥–∂–µ—Ç–∞! üìä\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üíº", reply_markup=main_kb)

@dp.message_handler(lambda message: message.text == "‚ûï –î–æ—Ö–æ–¥")
async def income_start(message: types.Message, state: FSMContext):
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä: +50000 –∑–∞—Ä–ø–ª–∞—Ç–∞")
    await state.set_state(IncomeState.waiting_for_income)

@dp.message_handler(IncomeState.waiting_for_income)
async def add_income(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    match = re.match(r"[+]?([\d]+)(?:\s+(.+))?", text)
    if match:
        amount = int(match.group(1))
        description = match.group(2) or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
        user_data[user_id]["income"].append((amount, description))
        await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {description} üíº", parse_mode="HTML")
    else:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message_handler(lambda message: message.text == "üí∏ –†–∞—Å—Ö–æ–¥")
async def expense_start(message: types.Message, state: FSMContext):
    await message.answer("üßæ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥: —Å—É–º–º—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∫–æ—Ä–º –¥–ª—è –∫–æ—à–∫–∏")
    await state.set_state(ExpenseState.waiting_for_expense)

@dp.message_handler(ExpenseState.waiting_for_expense)
async def add_expense(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    match = re.match(r"(\d+)\s+(.+)", text)
    if match:
        amount = int(match.group(1))
        description = match.group(2)
        category = "–ø—Ä–æ—á–µ–µ"
        for cat, keywords in user_data[user_id]["categories"].items():
            if any(keyword in description.lower() for keyword in keywords):
                category = cat
                break
        user_data[user_id]["expenses"].append((amount, description, category))
        await message.answer(f"üîª –†–∞—Å—Ö–æ–¥ {amount} ‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω: {description} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})", parse_mode="HTML")
    else:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message_handler(lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    total_income = sum(i[0] for i in user_data[user_id]["income"])
    total_expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üìä –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_income} ‚ÇΩ\nüìâ –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_expenses} ‚ÇΩ", parse_mode="HTML")

@dp.message_handler(lambda message: message.text == "üìä –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
async def category_stats(message: types.Message):
    user_id = message.from_user.id
    stats = defaultdict(int)
    for amount, _, category in user_data[user_id]["expenses"]:
        stats[category] += amount
    text = "üìÅ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
    for cat, total in stats.items():
        text += f"üî∏ {cat.capitalize()}: {total} ‚ÇΩ\n"
    await message.answer(text, parse_mode="HTML")

@dp.message_handler(lambda message: message.text == "üí∞ –û—Å—Ç–∞—Ç–æ–∫")
async def balance(message: types.Message):
    user_id = message.from_user.id
    income = sum(i[0] for i in user_data[user_id]["income"])
    expenses = sum(e[0] for e in user_data[user_id]["expenses"])
    await message.answer(f"üíº –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {income - expenses} ‚ÇΩ", parse_mode="HTML_)
